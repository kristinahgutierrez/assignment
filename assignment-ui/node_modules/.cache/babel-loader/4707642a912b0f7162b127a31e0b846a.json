{"ast":null,"code":"import { message } from \"antd\";\nimport { APi } from \"aws-amplify/lib/index\";\nimport AppConfig from \"../config\";\nimport axios from \"axios\";\nexport const RequestMethod = Object.freeze({\n  GET: \"get\",\n  POST: \"post\"\n});\nexport function handleAPIResponse(apiCall) {\n  return new Promise((resolve, reject) => {\n    apiCall().then(response => {\n      resolve(response);\n    }).catch(error => {\n      reject(handleNetworkError(error));\n    });\n  });\n}\nexport function onGetAmplify(apiName, path, params, withToken = true) {\n  async function invokeAPI() {\n    let resultParam = await getRequestParams(params, {}, withToken);\n    return await API.get(apiName, path, resultParam);\n  }\n\n  return handleAPIResponse(invokeAPI);\n}\nexport default async function request(path, payload = null, method = RequestMethod.GET, force = false, config = null) {\n  return new Promise((resolve, reject) => {\n    axios[method.toLowerCase()](path, payload, config).then(response => {\n      resolve(response.data);\n    }).catch(error => {\n      reject(handleNetworkError(error));\n    });\n  });\n}\nexport const handleNetworkError = error => {\n  let errorResponse = JSON.parse(JSON.stringify(error));\n  let status = 500;\n\n  if (error && error.response) {\n    errorResponse = error.response;\n  } else if (error && error.request) {\n    errorResponse = error.request;\n  }\n\n  if (errorResponse.status) {\n    status = errorResponse.status;\n  }\n\n  return errorResponse;\n};\nexport const showErrorMessage = (status, errorMessage) => {\n  if (status !== 422 && status !== 400) {\n    message.error(errorMessage);\n  }\n};","map":{"version":3,"sources":["D:/3_dev_code_repo/daofab-assignment/daofab-assigment/src/services/network.js"],"names":["message","APi","AppConfig","axios","RequestMethod","Object","freeze","GET","POST","handleAPIResponse","apiCall","Promise","resolve","reject","then","response","catch","error","handleNetworkError","onGetAmplify","apiName","path","params","withToken","invokeAPI","resultParam","getRequestParams","API","get","request","payload","method","force","config","toLowerCase","data","errorResponse","JSON","parse","stringify","status","showErrorMessage","errorMessage"],"mappings":"AACA,SAASA,OAAT,QAAwB,MAAxB;AACA,SAASC,GAAT,QAAoB,uBAApB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,aAAa,GAAGC,MAAM,CAACC,MAAP,CAAc;AACzCC,EAAAA,GAAG,EAAE,KADoC;AAEzCC,EAAAA,IAAI,EAAE;AAFmC,CAAd,CAAtB;AAMP,OAAO,SAASC,iBAAT,CAA2BC,OAA3B,EAAoC;AACzC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCH,IAAAA,OAAO,GACJI,IADH,CACQC,QAAQ,IAAI;AAChBH,MAAAA,OAAO,CAACG,QAAD,CAAP;AACD,KAHH,EAIGC,KAJH,CAISC,KAAK,IAAI;AACdJ,MAAAA,MAAM,CAACK,kBAAkB,CAACD,KAAD,CAAnB,CAAN;AACD,KANH;AAOD,GARM,CAAP;AASD;AAED,OAAO,SAASE,YAAT,CAAsBC,OAAtB,EAA+BC,IAA/B,EAAqCC,MAArC,EAA6CC,SAAS,GAAG,IAAzD,EAA+D;AACpE,iBAAeC,SAAf,GAA2B;AACzB,QAAIC,WAAW,GAAG,MAAMC,gBAAgB,CAACJ,MAAD,EAAS,EAAT,EAAaC,SAAb,CAAxC;AAEA,WAAO,MAAMI,GAAG,CAACC,GAAJ,CAAQR,OAAR,EAAiBC,IAAjB,EAAuBI,WAAvB,CAAb;AACD;;AAED,SAAOhB,iBAAiB,CAACe,SAAD,CAAxB;AACD;AAED,eAAe,eAAeK,OAAf,CAAuBR,IAAvB,EAA6BS,OAAO,GAAG,IAAvC,EAA6CC,MAAM,GAAG3B,aAAa,CAACG,GAApE,EAAyEyB,KAAK,GAAG,KAAjF,EAAwFC,MAAM,GAAG,IAAjG,EAAuG;AACpH,SAAO,IAAItB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCV,IAAAA,KAAK,CAAC4B,MAAM,CAACG,WAAP,EAAD,CAAL,CAA4Bb,IAA5B,EAAkCS,OAAlC,EAA2CG,MAA3C,EACGnB,IADH,CACQC,QAAQ,IAAI;AAChBH,MAAAA,OAAO,CAACG,QAAQ,CAACoB,IAAV,CAAP;AACD,KAHH,EAIGnB,KAJH,CAISC,KAAK,IAAI;AACdJ,MAAAA,MAAM,CAACK,kBAAkB,CAACD,KAAD,CAAnB,CAAN;AACD,KANH;AAOD,GARM,CAAP;AASD;AAGD,OAAO,MAAMC,kBAAkB,GAAGD,KAAK,IAAI;AACzC,MAAImB,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAetB,KAAf,CAAX,CAApB;AACA,MAAIuB,MAAM,GAAG,GAAb;;AACA,MAAIvB,KAAK,IAAIA,KAAK,CAACF,QAAnB,EAA6B;AAC3BqB,IAAAA,aAAa,GAAGnB,KAAK,CAACF,QAAtB;AACD,GAFD,MAEO,IAAIE,KAAK,IAAIA,KAAK,CAACY,OAAnB,EAA4B;AACjCO,IAAAA,aAAa,GAAGnB,KAAK,CAACY,OAAtB;AACD;;AACD,MAAIO,aAAa,CAACI,MAAlB,EAA0B;AACxBA,IAAAA,MAAM,GAAGJ,aAAa,CAACI,MAAvB;AACD;;AACD,SAAOJ,aAAP;AACD,CAZM;AAcP,OAAO,MAAMK,gBAAgB,GAAG,CAACD,MAAD,EAASE,YAAT,KAA0B;AACxD,MAAIF,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,GAAjC,EAAsC;AACpCxC,IAAAA,OAAO,CAACiB,KAAR,CAAcyB,YAAd;AACD;AACF,CAJM","sourcesContent":["\r\nimport { message } from \"antd\";\r\nimport { APi } from \"aws-amplify/lib/index\";\r\nimport AppConfig from \"../config\";\r\nimport axios from \"axios\";\r\n\r\nexport const RequestMethod = Object.freeze({\r\n  GET: \"get\",\r\n  POST: \"post\"\r\n});\r\n\r\n\r\nexport function handleAPIResponse(apiCall) {\r\n  return new Promise((resolve, reject) => {\r\n    apiCall()\r\n      .then(response => {\r\n        resolve(response);\r\n      })\r\n      .catch(error => {\r\n        reject(handleNetworkError(error));\r\n      });\r\n  });\r\n}\r\n\r\nexport function onGetAmplify(apiName, path, params, withToken = true) {\r\n  async function invokeAPI() {\r\n    let resultParam = await getRequestParams(params, {}, withToken);\r\n\r\n    return await API.get(apiName, path, resultParam);\r\n  }\r\n\r\n  return handleAPIResponse(invokeAPI);\r\n}\r\n\r\nexport default async function request(path, payload = null, method = RequestMethod.GET, force = false, config = null) {\r\n  return new Promise((resolve, reject) => {\r\n    axios[method.toLowerCase()](path, payload, config)\r\n      .then(response => {\r\n        resolve(response.data);\r\n      })\r\n      .catch(error => {\r\n        reject(handleNetworkError(error));\r\n      });\r\n  });\r\n}\r\n\r\n\r\nexport const handleNetworkError = error => {\r\n  let errorResponse = JSON.parse(JSON.stringify(error));\r\n  let status = 500;\r\n  if (error && error.response) {\r\n    errorResponse = error.response;\r\n  } else if (error && error.request) {\r\n    errorResponse = error.request;\r\n  }\r\n  if (errorResponse.status) {\r\n    status = errorResponse.status;\r\n  }\r\n  return errorResponse;\r\n};\r\n\r\nexport const showErrorMessage = (status, errorMessage) => {\r\n  if (status !== 422 && status !== 400) {\r\n    message.error(errorMessage);\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}